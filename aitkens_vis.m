function aitkens_vis()
	%{ 

		Visualize Aitken's method. The idea is that if {x_k} 
		is a fixed point iteration generated by the iteration function 
		phi, then as x_k gets closer and closer to the fixed point 
		alpha, the pairs (x_k,phi(x_k)-x_k) are nearly on a line. 

		Aitken's method says: let's pretend that (x_k,phi(x_k)-x_k) 
		and (x_{k+1},phi(x_{k+1})-x_{k+1}) are on a line, and compute the 
		root of this line. We then take this root as the next approximation. 
		The formula for this root is given by the Aitken's fixed point function. 

		The fixed point iteration we use for the visualization is the 
		Verhults model from population dynamics. On the plot, the first six iterations 
		are labeled. 

		Note the clustering of the pairs (x_k,phi(x_k)-x_k) around 
		the dashed line that passes through the fixed point (alpha,0). 
		This clustering is why the ``pretending" in Aitken's method 
		described above works. The iterates are *nearly* all on a line, so the 
		root of the line between two consecutive iterates, which is what Aitken's 
		function computes, is very nearly the true root. 

		If you apply Aitken's here, you'll find the fixed point in a single step. 

	%} 

	addpath('./textbook_algorithms');

	close all;

	K = 1; r = 3;
	phi = @(x) r*x ./ (1 + x*K);

	iters = 0; maxiters = 100; tol = 1e-8; err = tol+1; 
	x = 1; xold = x; nodes = []; y = []; x0=x;

	figure(1), hold on, grid on, xlim([0,3]), ylim([0,1])
	while iters < maxiters && err > tol 
		x = phi(x); 
		err = abs(x-xold);
		if iters > 14  && iters < 17
			nodes = [nodes x];
			y = [y x-xold]; 
		end
		xold = x; 
		iters += 1; 
		plot(x,err,'o','linewidth',2.0);
		lbl = sprintf('%g',iters);
		if iters < 7
			text(x+iters*log(iters+1)*1e-2,err+log(iters+1)*1e-2,lbl,'fontsize',20);
		end
		
	end	
	t = linspace(0,2); 
	c = polyfit(nodes,y,1); 
	plt = plot(t,polyval(c,t),'--','linewidth',2.0);
	legend(plt(end),'approximate line containing iterates');
	set(gca,'fontsize',20); 
	if err < tol 	
		fprintf('Standard method converged to %g in %g iterations.\n',x,iters);
	else 
		fprintf('Standard method did not converge in %g iterations.\n',iters);
	end 

	% apply Aitken 
	[root,iters] = aitken(phi,x0);
	fprintf("Aitken's converged to %g in %g iterations.\n",root,iters);

	
